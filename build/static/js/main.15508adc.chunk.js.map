{"version":3,"sources":["util.ts","ColourPicker/ColourPicker.tsx","Form/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["formatToRGBString","colour","r","g","b","ColourPicker","ref","handler","id","label","setColour","popover","useRef","useState","isOpen","setIsOpen","toggle","useCallback","currentValue","useEffect","startedInside","startedWhenMounted","listener","event","current","contains","target","validateEventStart","document","addEventListener","removeEventListener","className","htmlFor","type","style","backgroundColor","onClick","color","onChange","Form","start","setDuration","firstColour","setFirstColour","lastColour","setLastColour","hoursInput","minutesInput","secondsInput","setDurationInMs","hours","valueAsNumber","minutes","seconds","action","onSubmit","placeholder","App","isActive","setIsActive","duration","startDate","setStartDate","currentDate","setCurrentDate","preventDefault","updatedStartDate","Date","intervalID","setInterval","updatedCurrentDate","getTime","clearInterval","undefined","currentColour","timeSpentRatio","changeAmount","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15508adc.chunk.js","sourcesContent":["import { RgbColor } from \"react-colorful\";\nimport { RefObject, useEffect } from \"react\";\n\nexport const formatToRGBString = (colour: RgbColor): string => {\n  return `rgb(${colour.r}, ${colour.g}, ${colour.b})`;\n};\n\n// Improved version of https://usehooks.com/useOnClickOutside/\nexport const useClickOutside = <Element extends HTMLElement>(\n  ref: RefObject<Element>,\n  handler: EventListener\n) => {\n  useEffect(() => {\n    let startedInside = false;\n    let startedWhenMounted = false;\n\n    const listener: EventListener = (event) => {\n      // Do nothing if `mousedown` or `touchstart` started inside ref element\n      if (startedInside || !startedWhenMounted) return;\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target as Node)) return;\n\n      handler(event);\n    };\n\n    const validateEventStart: EventListener = (event) => {\n      startedWhenMounted = !!ref.current;\n      startedInside =\n        !!ref.current && ref.current.contains(event.target as Node);\n    };\n\n    document.addEventListener(\"mousedown\", validateEventStart);\n    document.addEventListener(\"touchstart\", validateEventStart);\n    document.addEventListener(\"click\", listener);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", validateEventStart);\n      document.removeEventListener(\"touchstart\", validateEventStart);\n      document.removeEventListener(\"click\", listener);\n    };\n  }, [ref, handler]);\n};\n","import React, { useCallback, useRef, useState } from \"react\";\nimport { RgbColorPicker, RgbColor } from \"react-colorful\";\nimport { formatToRGBString, useClickOutside } from \"../util\";\nimport \"./ColourPicker.css\";\n\ntype Props = {\n  id: string;\n  label: string;\n  colour: RgbColor;\n  setColour: (colour: RgbColor) => void;\n};\n\nfunction ColourPicker({ id, label, colour, setColour }: Props) {\n  const popover = useRef<HTMLDivElement>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = useCallback(() => {\n    setIsOpen((currentValue) => !currentValue);\n  }, []);\n\n  useClickOutside(popover, toggle);\n\n  return (\n    <div className=\"picker-container\">\n      <label htmlFor={id}>\n        {label}\n        <button\n          type=\"button\"\n          style={{ backgroundColor: formatToRGBString(colour) }}\n          onClick={toggle}\n        ></button>\n      </label>\n      {isOpen && (\n        <div className=\"picker\" ref={popover}>\n          <RgbColorPicker color={colour} onChange={setColour} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default ColourPicker;\n","import React, { FormEvent, useCallback, useRef } from \"react\";\nimport { RgbColor } from \"react-colorful\";\nimport ColourPicker from \"../ColourPicker/ColourPicker\";\nimport \"./Form.css\";\n\ntype Props = {\n  start: (event: FormEvent) => void;\n  setDuration: (duration: number) => void;\n  firstColour: RgbColor;\n  setFirstColour: (colour: RgbColor) => void;\n  lastColour: RgbColor;\n  setLastColour: (colour: RgbColor) => void;\n};\n\nfunction Form({\n  start,\n  setDuration,\n  firstColour,\n  setFirstColour,\n  lastColour,\n  setLastColour,\n}: Props) {\n  const hoursInput = useRef<HTMLInputElement>(null);\n  const minutesInput = useRef<HTMLInputElement>(null);\n  const secondsInput = useRef<HTMLInputElement>(null);\n\n  const setDurationInMs = useCallback(() => {\n    const hours: number = hoursInput.current?.valueAsNumber || 0;\n    const minutes: number = minutesInput.current?.valueAsNumber || 0;\n    const seconds: number = secondsInput.current?.valueAsNumber || 0;\n    setDuration((hours * 3600 + minutes * 60 + seconds) * 1000);\n  }, [setDuration]);\n\n  return (\n    <form action=\"\" onSubmit={start}>\n      <h1>Colour Timer</h1>\n      <div id=\"duration\">\n        <label htmlFor=\"hours\">H</label>\n        <input\n          id=\"hours\"\n          type=\"number\"\n          placeholder=\"00\"\n          ref={hoursInput}\n          onChange={setDurationInMs}\n        />\n\n        <label htmlFor=\"minutes\">M</label>\n        <input\n          id=\"minutes\"\n          type=\"number\"\n          placeholder=\"00\"\n          ref={minutesInput}\n          onChange={setDurationInMs}\n        />\n\n        <label htmlFor=\"seconds\">S</label>\n        <input\n          id=\"seconds\"\n          type=\"number\"\n          placeholder=\"00\"\n          ref={secondsInput}\n          onChange={setDurationInMs}\n        />\n      </div>\n      <ColourPicker\n        id=\"firstColour\"\n        label=\"First Colour\"\n        colour={firstColour}\n        setColour={setFirstColour}\n      />\n      <ColourPicker\n        id=\"lastColour\"\n        label=\"Last Colour\"\n        colour={lastColour}\n        setColour={setLastColour}\n      />\n\n      <button>Start !</button>\n    </form>\n  );\n}\n\nexport default Form;\n","import React, { useState, useCallback, FormEvent } from \"react\";\nimport { RgbColor } from \"react-colorful\";\nimport \"./App.css\";\nimport Form from \"./Form/Form\";\nimport { formatToRGBString } from \"./util\";\n\nfunction App() {\n  const [isActive, setIsActive] = useState(false);\n  const [firstColour, setFirstColour] = useState<RgbColor>({\n    r: 155,\n    g: 45,\n    b: 102,\n  });\n  const [lastColour, setLastColour] = useState<RgbColor>({\n    r: 24,\n    g: 101,\n    b: 47,\n  });\n  const [duration, setDuration] = useState(0);\n  const [startDate, setStartDate] = useState<Date>();\n  const [currentDate, setCurrentDate] = useState<Date>();\n\n  const start = useCallback(\n    (event: FormEvent) => {\n      event.preventDefault();\n\n      setIsActive(true);\n      const updatedStartDate = new Date();\n      setStartDate(updatedStartDate);\n      // To do: Save intervalID outside callback so it can be used to pause or clear timer. const intervalID = useRef\n      const intervalID = setInterval(() => {\n        const updatedCurrentDate = new Date();\n        if (\n          updatedCurrentDate.getTime() >=\n          updatedStartDate.getTime() + duration\n        ) {\n          clearInterval(intervalID);\n          setIsActive(false);\n          setStartDate(undefined);\n          setCurrentDate(undefined);\n        }\n        setCurrentDate(updatedCurrentDate);\n      }, duration / 256);\n    },\n    [duration]\n  );\n\n  let currentColour = firstColour;\n\n  if (currentDate && startDate) {\n    const timeSpentRatio =\n      (currentDate.getTime() - startDate.getTime()) / duration;\n\n    const changeAmount = {\n      r: Math.round((lastColour.r - firstColour.r) * timeSpentRatio),\n      g: Math.round((lastColour.g - firstColour.g) * timeSpentRatio),\n      b: Math.round((lastColour.b - firstColour.b) * timeSpentRatio),\n    };\n    // Note: variations can be negative numbers\n    // /!\\ changeAmount need to be integers /!\\\n\n    currentColour = {\n      r: firstColour.r + changeAmount.r,\n      g: firstColour.g + changeAmount.g,\n      b: firstColour.b + changeAmount.b,\n    };\n  }\n\n  return (\n    <div\n      className=\"App\"\n      style={{ backgroundColor: formatToRGBString(currentColour) }}\n    >\n      {!isActive && (\n        <Form\n          start={start}\n          setDuration={setDuration}\n          firstColour={firstColour}\n          setFirstColour={setFirstColour}\n          lastColour={lastColour}\n          setLastColour={setLastColour}\n        />\n      )}\n      {isActive && (\n        <div\n          className=\"endColourCircle\"\n          style={{ backgroundColor: formatToRGBString(lastColour) }}\n        ></div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}